
COMPILER Coco

CHARACTERS
	letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
	digit     = "0123456789".
	cr        = '\r'.
	lf        = '\n'.
	tab       = '\t'.
	stringCh  = ANY - '"' - '\\' - cr - lf.
	charCh    = ANY - '\'' - '\\' - cr - lf.
	printable =  '\u0020' .. '\u007e'.
	hex       = "0123456789abcdef".

TOKENS
	ident     = letter { letter | digit }.
	number    = digit { digit }.
	string    = '"' { stringCh | '\\' printable } '"'.
	badString = '"' { stringCh | '\\' printable } (cr | lf).
	char      = '\'' ( charCh | '\\' printable { hex } ) '\''.

PRAGMAS
	ddtSym    = '$' { digit | letter }.  
	optionSym = '$' letter { letter } '='
	            { digit | letter
	            | '-' | '.' | ':'
	            }.                       


COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------*/

PRODUCTIONS

Coco                            
=
                                
  { // this section can be used
    // for #include statements
    ANY
  }

  "COMPILER"
  ident
  { ANY }                       
  [ "IGNORECASE"                 ]   /* pdt */
  [ "CHARACTERS" { SetDecl }]
  [ "TOKENS"  { TokenDecl<> }]
  [ "PRAGMAS" { TokenDecl<> }]
  { "COMMENTS"                  
    "FROM" TokenExpr<>
    "TO" TokenExpr<>
    [ "NESTED"                  
    ]                           
  }
  { "IGNORE" Set<>
  }

  SYNC
  "PRODUCTIONS"
  { ident
    [ AttrDecl<> ]
    [ SemText<..> ] WEAK
    '='
    Expression<>
                                WEAK
    '.'
  }
  "END" ident
  '.'
.

/*------------------------------------------------------------------------------------*/

SetDecl                         
=
  ident
  '=' Set<>
  '.'
.

/*------------------------------------------------------------------------------------*/

Set<>
=
  SimSet<>
  { '+' SimSet<>
  | '-' SimSet<>
  }
.

/*------------------------------------------------------------------------------------*/

SimSet<>
=                               
( ident
| string
| Char<>
  [ ".." Char<>
  ]
| "ANY"                         
)
.

/*--------------------------------------------------------------------------------------*/

Char<>
=
  char
.

/*------------------------------------------------------------------------------------*/

TokenDecl<>
=
  Sym<>
  SYNC
  ( '=' TokenExpr<> '.'
  |
  )
  [ SemText<..>
  ]
.

/*------------------------------------------------------------------------------------*/

AttrDecl<>
=
  '<'                           
  { ANY
  | badString                   
  }
  '>'
| "<."                          
  { ANY
  | badString                   
  }
  ".>"
.

/*------------------------------------------------------------------------------------*/

Expression<>
=
  Term<>
  {                             WEAK
    '|'
    Term<>
  }
.

/*------------------------------------------------------------------------------------*/

Term<>
=
( [                           
    Resolver<..>
  ]
  Factor<>
  { Factor<>
  }
|                             
)
.

/*------------------------------------------------------------------------------------*/

Factor<>
=
( [ "WEAK"                      
  ]
  Sym<>
  [ Attribs<>
  ]
| '(' Expression<> ')'
| '[' Expression<> ']'
| '{' Expression<> '}'
| SemText<>
| "ANY"
| "SYNC"
)
.

/*------------------------------------------------------------------------------------*/

Resolver<>
=
  "IF" "("                       
  Condition                      
.

/*------------------------------------------------------------------------------------*/

Condition = { "(" Condition | ANY } ")" .

/*------------------------------------------------------------------------------------*/

TokenExpr<>
=
  TokenTerm<>
  {                             WEAK
    '|'
    TokenTerm<>
  }
.

/*------------------------------------------------------------------------------------*/

TokenTerm<>
=
  TokenFactor<>
  { TokenFactor<>
  }
  [ "CONTEXT"
    '(' TokenExpr<>
    ')'
  ]
.

/*------------------------------------------------------------------------------------*/

TokenFactor<>
=
                              
( Sym<>
| '(' TokenExpr<> ')'
| '[' TokenExpr<> ']'
| '{' TokenExpr<> '}'
)
.

/*------------------------------------------------------------------------------------*/

Sym<>
=                               
( ident                         
| (string                       
  | char
  )
)
.

/*------------------------------------------------------------------------------------*/

Attribs<>
=
  '<'                           
  { ANY
  | badString                   
  }
  '>'                           
| "<."                          
  { ANY
  | badString                   
  }
  ".>"                          
.

/*------------------------------------------------------------------------------------*/

SemText<>
=
  "(."
  { ANY
  | badString                   
  | "(."
  }
  ".)"                          
.

/*------------------------------------------------------------------------------------*/

END Coco.
