/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package de.qrdn.coco_idea;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.qrdn.coco_idea.psi.CocoTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Coco.flex</tt>
 */
class CocoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\11\1\15\2\0\1\5\22\0\1\12\1\6\1\3\4\6\1\4\1\47\1\50\1\14\1\42\1\6"+
    "\1\43\1\41\1\13\12\2\2\6\1\45\1\40\1\46\2\6\1\30\1\1\1\16\1\36\1\24\1\35\1"+
    "\26\1\32\1\22\1\1\1\34\1\23\1\20\1\27\1\17\1\21\1\1\1\25\1\31\1\33\1\37\1"+
    "\1\1\52\1\57\1\44\1\1\1\53\1\7\1\54\1\6\1\1\1\6\6\10\24\1\1\55\1\51\1\56\1"+
    "\6\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\1\11\2\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\2\1\15\1\16\1\17\1\20\1\0\1\21\3\0"+
    "\1\22\1\0\4\2\1\23\4\2\1\24\1\2\1\25"+
    "\1\26\1\27\1\30\1\31\1\2\1\32\1\0\2\22"+
    "\2\0\6\2\1\33\1\2\1\34\4\2\1\0\10\2"+
    "\1\35\1\2\1\36\1\37\17\2\1\40\1\41\1\42"+
    "\2\2\1\43\2\2\1\44\1\2\1\45\1\46\6\2"+
    "\1\47\1\2\1\50\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\60\0\u0300\0\60\0\60\0\u0330\0\60\0\u0360\0\60"+
    "\0\140\0\u0390\0\60\0\60\0\60\0\60\0\220\0\60"+
    "\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510"+
    "\0\u0540\0\140\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660"+
    "\0\60\0\60\0\60\0\60\0\60\0\u0690\0\60\0\u06c0"+
    "\0\u06f0\0\60\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810"+
    "\0\u0840\0\u0870\0\140\0\u08a0\0\140\0\u08d0\0\u0900\0\u0930"+
    "\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0"+
    "\0\u0ae0\0\u0b10\0\140\0\u0b40\0\140\0\140\0\u0b70\0\u0ba0"+
    "\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20"+
    "\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\140\0\140"+
    "\0\u0e70\0\u0ea0\0\140\0\u0ed0\0\u0f00\0\140\0\u0f30\0\140"+
    "\0\140\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\140"+
    "\0\u1080\0\140\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\2\2\1\3"+
    "\2\6\1\7\1\2\1\6\1\10\2\3\1\11\1\12"+
    "\1\3\1\13\2\3\1\14\1\15\1\16\1\3\1\17"+
    "\1\3\1\20\2\3\1\21\1\22\1\23\1\24\1\3"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\3\61\0\2\3\5\0\1\3\5\0"+
    "\22\3\4\0\1\3\4\0\2\3\4\0\1\3\3\37"+
    "\1\40\1\37\1\0\1\37\1\41\5\37\1\0\42\37"+
    "\4\42\2\0\1\42\1\43\5\42\1\0\42\42\5\0"+
    "\1\6\3\0\2\6\2\0\1\6\55\0\1\44\1\45"+
    "\44\0\2\3\5\0\1\3\5\0\1\3\1\46\12\3"+
    "\1\47\5\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\2\3\5\0\1\3\5\0\7\3\1\50\12\3"+
    "\4\0\1\3\4\0\2\3\4\0\1\3\1\0\2\3"+
    "\5\0\1\3\5\0\10\3\1\51\6\3\1\52\2\3"+
    "\4\0\1\3\4\0\2\3\4\0\1\3\1\0\2\3"+
    "\5\0\1\3\5\0\11\3\1\53\10\3\4\0\1\3"+
    "\4\0\2\3\4\0\1\3\1\0\2\3\5\0\1\3"+
    "\5\0\6\3\1\54\13\3\4\0\1\3\4\0\2\3"+
    "\4\0\1\3\1\0\2\3\5\0\1\3\5\0\11\3"+
    "\1\55\10\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\2\3\5\0\1\3\5\0\22\3\4\0\1\56"+
    "\4\0\2\3\4\0\1\3\1\0\2\3\5\0\1\3"+
    "\5\0\1\3\1\57\20\3\4\0\1\3\4\0\2\3"+
    "\4\0\1\3\1\0\2\3\5\0\1\3\5\0\7\3"+
    "\1\60\12\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\41\0\1\61\4\0\1\62\1\0\1\63\50\0\1\64"+
    "\57\0\1\65\17\0\2\3\5\0\1\3\5\0\6\3"+
    "\1\66\13\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\4\37\1\0\3\37\1\0\3\37\1\0\42\37"+
    "\4\0\1\67\54\0\4\70\1\0\3\70\1\0\3\70"+
    "\1\0\42\70\5\44\1\71\7\44\1\72\42\44\14\73"+
    "\1\74\43\73\1\0\2\3\5\0\1\3\5\0\2\3"+
    "\1\75\6\3\1\76\10\3\4\0\1\3\4\0\2\3"+
    "\4\0\1\3\1\0\2\3\5\0\1\3\5\0\12\3"+
    "\1\77\7\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\2\3\5\0\1\3\5\0\1\3\1\100\10\3"+
    "\1\101\7\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\2\3\5\0\1\3\5\0\11\3\1\102\10\3"+
    "\4\0\1\3\4\0\2\3\4\0\1\3\1\0\2\3"+
    "\5\0\1\3\5\0\20\3\1\103\1\3\4\0\1\3"+
    "\4\0\2\3\4\0\1\3\1\0\2\3\5\0\1\3"+
    "\5\0\13\3\1\104\6\3\4\0\1\3\4\0\2\3"+
    "\4\0\1\3\1\0\2\3\5\0\1\3\5\0\22\3"+
    "\4\0\1\105\4\0\2\3\4\0\1\3\1\0\2\3"+
    "\5\0\1\3\5\0\11\3\1\106\10\3\4\0\1\3"+
    "\4\0\2\3\4\0\1\3\1\0\2\3\5\0\1\3"+
    "\5\0\16\3\1\107\3\3\4\0\1\3\4\0\2\3"+
    "\4\0\1\3\1\0\2\3\5\0\1\3\5\0\1\3"+
    "\1\110\20\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\2\3\5\0\1\3\5\0\12\3\1\111\7\3"+
    "\4\0\1\3\4\0\2\3\4\0\1\3\2\0\1\70"+
    "\1\0\1\67\3\0\1\70\64\0\1\72\42\0\14\73"+
    "\1\112\43\73\13\0\1\72\1\74\44\0\2\3\5\0"+
    "\1\3\5\0\2\3\1\113\1\114\16\3\4\0\1\3"+
    "\4\0\2\3\4\0\1\3\1\0\2\3\5\0\1\3"+
    "\5\0\15\3\1\115\4\3\4\0\1\3\4\0\2\3"+
    "\4\0\1\3\1\0\2\3\5\0\1\3\5\0\7\3"+
    "\1\116\12\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\2\3\5\0\1\3\5\0\20\3\1\117\1\3"+
    "\4\0\1\3\4\0\2\3\4\0\1\3\1\0\2\3"+
    "\5\0\1\3\5\0\10\3\1\120\11\3\4\0\1\3"+
    "\4\0\2\3\4\0\1\3\1\0\2\3\5\0\1\3"+
    "\5\0\1\3\1\121\20\3\4\0\1\3\4\0\2\3"+
    "\4\0\1\3\1\0\2\3\5\0\1\3\5\0\15\3"+
    "\1\122\4\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\2\3\5\0\1\3\5\0\1\123\21\3\4\0"+
    "\1\3\4\0\2\3\4\0\1\3\1\0\2\3\5\0"+
    "\1\3\5\0\6\3\1\124\13\3\4\0\1\3\4\0"+
    "\2\3\4\0\1\3\1\0\2\3\5\0\1\3\5\0"+
    "\2\3\1\125\17\3\4\0\1\3\4\0\2\3\4\0"+
    "\1\3\1\0\2\3\5\0\1\3\5\0\16\3\1\126"+
    "\3\3\4\0\1\3\4\0\2\3\4\0\1\3\13\73"+
    "\1\72\1\112\43\73\1\0\2\3\5\0\1\3\5\0"+
    "\6\3\1\127\13\3\4\0\1\3\4\0\2\3\4\0"+
    "\1\3\1\0\2\3\5\0\1\3\5\0\4\3\1\130"+
    "\15\3\4\0\1\3\4\0\2\3\4\0\1\3\1\0"+
    "\2\3\5\0\1\3\5\0\6\3\1\131\13\3\4\0"+
    "\1\3\4\0\2\3\4\0\1\3\1\0\2\3\5\0"+
    "\1\3\5\0\12\3\1\132\7\3\4\0\1\3\4\0"+
    "\2\3\4\0\1\3\1\0\2\3\5\0\1\3\5\0"+
    "\21\3\1\133\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\2\3\5\0\1\3\5\0\2\3\1\134\17\3"+
    "\4\0\1\3\4\0\2\3\4\0\1\3\1\0\2\3"+
    "\5\0\1\3\5\0\7\3\1\135\12\3\4\0\1\3"+
    "\4\0\2\3\4\0\1\3\1\0\2\3\5\0\1\3"+
    "\5\0\6\3\1\136\13\3\4\0\1\3\4\0\2\3"+
    "\4\0\1\3\1\0\2\3\5\0\1\3\5\0\11\3"+
    "\1\137\10\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\2\3\5\0\1\3\5\0\11\3\1\140\10\3"+
    "\4\0\1\3\4\0\2\3\4\0\1\3\1\0\2\3"+
    "\5\0\1\3\5\0\5\3\1\141\14\3\4\0\1\3"+
    "\4\0\2\3\4\0\1\3\1\0\2\3\5\0\1\3"+
    "\5\0\22\3\4\0\1\3\4\0\2\3\4\0\1\142"+
    "\1\0\2\3\5\0\1\3\5\0\1\143\21\3\4\0"+
    "\1\3\4\0\2\3\4\0\1\3\1\0\2\3\5\0"+
    "\1\3\5\0\1\144\21\3\4\0\1\3\4\0\2\3"+
    "\4\0\1\3\1\0\2\3\5\0\1\3\5\0\12\3"+
    "\1\145\7\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\2\3\5\0\1\3\5\0\6\3\1\146\13\3"+
    "\4\0\1\3\4\0\2\3\4\0\1\3\1\0\2\3"+
    "\5\0\1\3\5\0\20\3\1\147\1\3\4\0\1\3"+
    "\4\0\2\3\4\0\1\3\1\0\2\3\5\0\1\3"+
    "\5\0\13\3\1\150\6\3\4\0\1\3\4\0\2\3"+
    "\4\0\1\3\1\0\2\3\5\0\1\3\5\0\15\3"+
    "\1\151\4\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\2\3\5\0\1\3\5\0\6\3\1\152\13\3"+
    "\4\0\1\3\4\0\2\3\4\0\1\3\1\0\2\3"+
    "\5\0\1\3\5\0\15\3\1\153\4\3\4\0\1\3"+
    "\4\0\2\3\4\0\1\3\1\0\2\3\5\0\1\3"+
    "\5\0\15\3\1\154\4\3\4\0\1\3\4\0\2\3"+
    "\4\0\1\3\1\0\2\3\5\0\1\3\5\0\15\3"+
    "\1\155\4\3\4\0\1\3\4\0\2\3\4\0\1\3"+
    "\1\0\2\3\5\0\1\3\5\0\13\3\1\156\6\3"+
    "\4\0\1\3\4\0\2\3\4\0\1\3\1\0\2\3"+
    "\5\0\1\3\5\0\1\157\21\3\4\0\1\3\4\0"+
    "\2\3\4\0\1\3\1\0\2\3\5\0\1\3\5\0"+
    "\13\3\1\160\6\3\4\0\1\3\4\0\2\3\4\0"+
    "\1\3\1\0\2\3\5\0\1\3\5\0\7\3\1\161"+
    "\12\3\4\0\1\3\4\0\2\3\4\0\1\3\1\0"+
    "\2\3\5\0\1\3\5\0\6\3\1\162\13\3\4\0"+
    "\1\3\4\0\2\3\4\0\1\3\1\0\2\3\5\0"+
    "\1\3\5\0\4\3\1\163\15\3\4\0\1\3\4\0"+
    "\2\3\4\0\1\3\1\0\2\3\5\0\1\3\5\0"+
    "\12\3\1\164\7\3\4\0\1\3\4\0\2\3\4\0"+
    "\1\3\1\0\2\3\5\0\1\3\5\0\7\3\1\165"+
    "\12\3\4\0\1\3\4\0\2\3\4\0\1\3\1\0"+
    "\2\3\5\0\1\3\5\0\1\3\1\166\20\3\4\0"+
    "\1\3\4\0\2\3\4\0\1\3\1\0\2\3\5\0"+
    "\1\3\5\0\13\3\1\167\6\3\4\0\1\3\4\0"+
    "\2\3\4\0\1\3\1\0\2\3\5\0\1\3\5\0"+
    "\13\3\1\170\6\3\4\0\1\3\4\0\2\3\4\0"+
    "\1\3\1\0\2\3\5\0\1\3\5\0\11\3\1\171"+
    "\10\3\4\0\1\3\4\0\2\3\4\0\1\3\1\0"+
    "\2\3\5\0\1\3\5\0\6\3\1\172\13\3\4\0"+
    "\1\3\4\0\2\3\4\0\1\3\1\0\2\3\5\0"+
    "\1\3\5\0\13\3\1\173\6\3\4\0\1\3\4\0"+
    "\2\3\4\0\1\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4272];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\1\1\2\11\1\1\1\11"+
    "\1\1\1\11\2\1\4\11\1\0\1\11\3\0\1\1"+
    "\1\0\13\1\5\11\1\1\1\11\1\0\1\1\1\11"+
    "\2\0\15\1\1\0\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CocoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 42: break;
          case 2: 
            { return CocoTypes.IDENT;
            }
          case 43: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 44: break;
          case 4: 
            { return CocoTypes.EQUALS;
            }
          case 45: break;
          case 5: 
            { return CocoTypes.DOT;
            }
          case 46: break;
          case 6: 
            { return CocoTypes.PLUS;
            }
          case 47: break;
          case 7: 
            { return CocoTypes.MINUS;
            }
          case 48: break;
          case 8: 
            { return CocoTypes.LESS;
            }
          case 49: break;
          case 9: 
            { return CocoTypes.GREATER;
            }
          case 50: break;
          case 10: 
            { return CocoTypes.LPAREN;
            }
          case 51: break;
          case 11: 
            { return CocoTypes.RPAREN;
            }
          case 52: break;
          case 12: 
            { return CocoTypes.OR;
            }
          case 53: break;
          case 13: 
            { return CocoTypes.LSPAREN;
            }
          case 54: break;
          case 14: 
            { return CocoTypes.RSPAREN;
            }
          case 55: break;
          case 15: 
            { return CocoTypes.LAPAREN;
            }
          case 56: break;
          case 16: 
            { return CocoTypes.RAPAREN;
            }
          case 57: break;
          case 17: 
            { return CocoTypes.STRING;
            }
          case 58: break;
          case 18: 
            { return CocoTypes.COMMENT;
            }
          case 59: break;
          case 19: 
            { return CocoTypes.IF;
            }
          case 60: break;
          case 20: 
            { return CocoTypes.TO;
            }
          case 61: break;
          case 21: 
            { return CocoTypes.DOTDOT;
            }
          case 62: break;
          case 22: 
            { return CocoTypes.GREATERDOT;
            }
          case 63: break;
          case 23: 
            { return CocoTypes.INSTR_END;
            }
          case 64: break;
          case 24: 
            { return CocoTypes.LESSDOT;
            }
          case 65: break;
          case 25: 
            { return CocoTypes.INSTR_START;
            }
          case 66: break;
          case 26: 
            { return CocoTypes.CHARACTER;
            }
          case 67: break;
          case 27: 
            { return CocoTypes.END;
            }
          case 68: break;
          case 28: 
            { return CocoTypes.ANY;
            }
          case 69: break;
          case 29: 
            { return CocoTypes.SYNC;
            }
          case 70: break;
          case 30: 
            { return CocoTypes.FROM;
            }
          case 71: break;
          case 31: 
            { return CocoTypes.WEAK;
            }
          case 72: break;
          case 32: 
            { return CocoTypes.IGNORE;
            }
          case 73: break;
          case 33: 
            { return CocoTypes.NESTED;
            }
          case 74: break;
          case 34: 
            { return CocoTypes.TOKENS;
            }
          case 75: break;
          case 35: 
            { return CocoTypes.CONTEXT;
            }
          case 76: break;
          case 36: 
            { return CocoTypes.PRAGMAS;
            }
          case 77: break;
          case 37: 
            { return CocoTypes.COMMENTS;
            }
          case 78: break;
          case 38: 
            { return CocoTypes.COMPILER;
            }
          case 79: break;
          case 39: 
            { return CocoTypes.CHARACTERS;
            }
          case 80: break;
          case 40: 
            { return CocoTypes.IGNORECASE;
            }
          case 81: break;
          case 41: 
            { return CocoTypes.PRODUCTIONS;
            }
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
