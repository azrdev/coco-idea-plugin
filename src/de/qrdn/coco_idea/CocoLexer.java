/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package de.qrdn.coco_idea;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.qrdn.coco_idea.psi.CocoTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Coco.flex</tt>
 */
class CocoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int compiler_decl = 2;
  public static final int global_decl = 4;
  public static final int coco = 6;
  public static final int pre_resolver = 8;
  public static final int resolver = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\11\1\15\2\0\1\5\22\0\1\12\1\6\1\3\4\6\1\4\1\47\1\50\1\14\1\42\1\6"+
    "\1\43\1\41\1\13\12\2\2\6\1\56\1\40\1\57\2\6\1\30\1\1\1\16\1\36\1\24\1\35\1"+
    "\26\1\32\1\22\1\1\1\34\1\23\1\20\1\27\1\17\1\21\1\1\1\25\1\31\1\33\1\37\1"+
    "\1\1\46\1\55\1\45\1\1\1\51\1\7\1\52\1\6\1\1\1\6\6\10\24\1\1\53\1\44\1\54\1"+
    "\6\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\2\1\1\2\1\3\1\4\1\3\2\1\1\5"+
    "\3\2\11\5\1\6\1\7\1\10\1\11\1\12\1\5"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\2\1\21"+
    "\1\22\1\23\1\0\1\3\3\0\1\24\3\0\1\25"+
    "\1\0\4\5\1\26\4\5\1\27\1\5\1\30\1\5"+
    "\3\0\1\31\1\0\1\3\2\0\1\32\1\0\2\25"+
    "\1\0\6\5\1\33\1\5\1\34\4\5\2\0\1\31"+
    "\1\0\1\3\2\0\10\5\1\35\1\5\1\36\1\37"+
    "\1\40\3\0\1\3\2\0\11\5\1\41\1\0\1\3"+
    "\2\0\6\5\1\42\1\43\1\44\1\0\1\3\2\0"+
    "\2\5\1\45\2\5\1\46\1\5\1\47\1\50\2\0"+
    "\1\51\1\50\3\5\2\0\3\5\1\52\1\53\1\5"+
    "\1\54\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0120\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\u0120\0\u04e0\0\u0120\0\u0120\0\u0270"+
    "\0\u0510\0\u0540\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0570"+
    "\0\u0120\0\u0120\0\u0120\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u02a0"+
    "\0\u0120\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780"+
    "\0\u07b0\0\u07e0\0\u0270\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0"+
    "\0\u0900\0\u0120\0\u0930\0\u0960\0\u0990\0\u09c0\0\u0120\0\u09f0"+
    "\0\u0a20\0\u0a50\0\u0a80\0\u0120\0\u0ab0\0\u0ae0\0\u0120\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0270\0\u0c60"+
    "\0\u0270\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0"+
    "\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30"+
    "\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u0270\0\u1020\0\u0270\0\u0270"+
    "\0\u0120\0\u0db0\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140"+
    "\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0"+
    "\0\u0120\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410"+
    "\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u0270\0\u0270\0\u1500\0\u1530"+
    "\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u0270\0\u1620\0\u1650\0\u0270"+
    "\0\u1680\0\u0120\0\u0180\0\u16b0\0\u16e0\0\u0270\0\u0270\0\u1710"+
    "\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860\0\u0120"+
    "\0\u0270\0\u1890\0\u0270\0\u0270";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\16\7\1\10\41\7\1\11\1\12\3\11\1\13\2\11"+
    "\1\12\2\13\2\11\1\13\1\14\21\12\4\11\3\12"+
    "\6\11\1\12\2\11\16\7\1\15\3\7\1\16\35\7"+
    "\1\11\1\17\1\11\1\20\1\21\1\13\2\11\1\17"+
    "\2\13\1\22\1\11\1\13\1\23\2\17\1\24\1\25"+
    "\1\17\1\26\2\17\1\27\1\30\1\31\1\17\1\32"+
    "\1\17\1\33\2\17\1\34\1\35\1\36\1\37\1\40"+
    "\1\17\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\17\1\50\6\11\1\13\3\11\2\13\2\11\1\13"+
    "\31\11\1\51\10\11\47\7\1\52\1\53\7\7\77\0"+
    "\1\54\41\0\2\12\5\0\1\12\5\0\22\12\4\0"+
    "\3\12\6\0\1\12\7\0\1\13\3\0\2\13\2\0"+
    "\1\13\43\0\2\12\5\0\1\12\5\0\1\12\1\55"+
    "\20\12\4\0\3\12\6\0\1\12\34\0\1\56\53\0"+
    "\1\57\32\0\2\17\5\0\1\17\5\0\22\17\4\0"+
    "\3\17\6\0\1\17\2\0\3\60\1\61\1\60\1\0"+
    "\1\60\1\62\5\60\1\0\42\60\4\63\2\0\1\63"+
    "\1\64\5\63\1\0\42\63\13\0\1\65\1\66\44\0"+
    "\2\17\5\0\1\17\5\0\1\17\1\67\12\17\1\70"+
    "\5\17\4\0\3\17\6\0\1\17\3\0\2\17\5\0"+
    "\1\17\5\0\7\17\1\71\12\17\4\0\3\17\6\0"+
    "\1\17\3\0\2\17\5\0\1\17\5\0\10\17\1\72"+
    "\6\17\1\73\2\17\4\0\3\17\6\0\1\17\3\0"+
    "\2\17\5\0\1\17\5\0\11\17\1\74\10\17\4\0"+
    "\3\17\6\0\1\17\3\0\2\17\5\0\1\17\5\0"+
    "\6\17\1\75\13\17\4\0\3\17\6\0\1\17\3\0"+
    "\2\17\5\0\1\17\5\0\11\17\1\76\10\17\4\0"+
    "\3\17\6\0\1\17\3\0\2\17\5\0\1\17\5\0"+
    "\22\17\4\0\1\17\1\77\1\17\6\0\1\17\3\0"+
    "\2\17\5\0\1\17\5\0\1\17\1\100\20\17\4\0"+
    "\3\17\6\0\1\17\3\0\2\17\5\0\1\17\5\0"+
    "\7\17\1\101\12\17\4\0\3\17\6\0\1\17\43\0"+
    "\1\102\17\0\2\17\5\0\1\17\5\0\6\17\1\103"+
    "\13\17\4\0\3\17\6\0\1\17\43\0\1\104\16\0"+
    "\41\105\1\106\15\105\1\107\20\0\1\110\40\0\2\12"+
    "\5\0\1\12\5\0\2\12\1\111\17\12\4\0\3\12"+
    "\6\0\1\12\32\0\1\112\56\0\1\113\31\0\4\60"+
    "\1\0\3\60\1\0\3\60\1\0\42\60\4\0\1\114"+
    "\54\0\4\115\1\0\3\115\1\0\3\115\1\0\42\115"+
    "\5\65\1\116\7\65\1\117\42\65\14\66\1\120\43\66"+
    "\1\0\2\17\5\0\1\17\5\0\2\17\1\121\6\17"+
    "\1\122\10\17\4\0\3\17\6\0\1\17\3\0\2\17"+
    "\5\0\1\17\5\0\12\17\1\123\7\17\4\0\3\17"+
    "\6\0\1\17\3\0\2\17\5\0\1\17\5\0\1\17"+
    "\1\124\10\17\1\125\7\17\4\0\3\17\6\0\1\17"+
    "\3\0\2\17\5\0\1\17\5\0\11\17\1\126\10\17"+
    "\4\0\3\17\6\0\1\17\3\0\2\17\5\0\1\17"+
    "\5\0\20\17\1\127\1\17\4\0\3\17\6\0\1\17"+
    "\3\0\2\17\5\0\1\17\5\0\13\17\1\130\6\17"+
    "\4\0\3\17\6\0\1\17\3\0\2\17\5\0\1\17"+
    "\5\0\22\17\4\0\1\17\1\131\1\17\6\0\1\17"+
    "\3\0\2\17\5\0\1\17\5\0\11\17\1\132\10\17"+
    "\4\0\3\17\6\0\1\17\3\0\2\17\5\0\1\17"+
    "\5\0\16\17\1\133\3\17\4\0\3\17\6\0\1\17"+
    "\3\0\2\17\5\0\1\17\5\0\1\17\1\134\20\17"+
    "\4\0\3\17\6\0\1\17\3\0\2\17\5\0\1\17"+
    "\5\0\12\17\1\135\7\17\4\0\3\17\6\0\1\17"+
    "\2\0\41\104\1\136\16\104\57\105\1\107\41\106\1\137"+
    "\15\106\1\140\21\0\1\141\37\0\2\12\5\0\1\12"+
    "\5\0\3\12\1\142\16\12\4\0\3\12\6\0\1\12"+
    "\27\0\1\143\51\0\1\144\42\0\1\115\1\0\1\114"+
    "\3\0\1\115\64\0\1\117\42\0\13\66\1\117\1\120"+
    "\43\66\1\0\2\17\5\0\1\17\5\0\2\17\1\145"+
    "\1\146\16\17\4\0\3\17\6\0\1\17\3\0\2\17"+
    "\5\0\1\17\5\0\15\17\1\147\4\17\4\0\3\17"+
    "\6\0\1\17\3\0\2\17\5\0\1\17\5\0\7\17"+
    "\1\150\12\17\4\0\3\17\6\0\1\17\3\0\2\17"+
    "\5\0\1\17\5\0\20\17\1\151\1\17\4\0\3\17"+
    "\6\0\1\17\3\0\2\17\5\0\1\17\5\0\10\17"+
    "\1\152\11\17\4\0\3\17\6\0\1\17\3\0\2\17"+
    "\5\0\1\17\5\0\1\17\1\153\20\17\4\0\3\17"+
    "\6\0\1\17\3\0\2\17\5\0\1\17\5\0\15\17"+
    "\1\154\4\17\4\0\3\17\6\0\1\17\3\0\2\17"+
    "\5\0\1\17\5\0\1\155\21\17\4\0\3\17\6\0"+
    "\1\17\3\0\2\17\5\0\1\17\5\0\6\17\1\156"+
    "\13\17\4\0\3\17\6\0\1\17\3\0\2\17\5\0"+
    "\1\17\5\0\2\17\1\157\17\17\4\0\3\17\6\0"+
    "\1\17\3\0\2\17\5\0\1\17\5\0\16\17\1\160"+
    "\3\17\4\0\3\17\6\0\1\17\2\0\41\104\1\136"+
    "\6\104\1\161\7\104\41\106\1\137\15\106\1\107\41\162"+
    "\1\163\16\162\22\0\1\164\36\0\2\12\5\0\1\12"+
    "\5\0\4\12\1\165\15\12\4\0\3\12\6\0\1\12"+
    "\32\0\1\166\54\0\1\167\33\0\2\17\5\0\1\17"+
    "\5\0\6\17\1\170\13\17\4\0\3\17\6\0\1\17"+
    "\3\0\2\17\5\0\1\17\5\0\4\17\1\171\15\17"+
    "\4\0\3\17\6\0\1\17\3\0\2\17\5\0\1\17"+
    "\5\0\6\17\1\172\13\17\4\0\3\17\6\0\1\17"+
    "\3\0\2\17\5\0\1\17\5\0\12\17\1\173\7\17"+
    "\4\0\3\17\6\0\1\17\3\0\2\17\5\0\1\17"+
    "\5\0\21\17\1\174\4\0\3\17\6\0\1\17\3\0"+
    "\2\17\5\0\1\17\5\0\2\17\1\175\17\17\4\0"+
    "\3\17\6\0\1\17\3\0\2\17\5\0\1\17\5\0"+
    "\7\17\1\176\12\17\4\0\3\17\6\0\1\17\3\0"+
    "\2\17\5\0\1\17\5\0\6\17\1\177\13\17\4\0"+
    "\3\17\6\0\1\17\3\0\2\17\5\0\1\17\5\0"+
    "\11\17\1\200\10\17\4\0\3\17\6\0\1\17\2\0"+
    "\41\162\1\163\15\162\1\201\23\0\1\202\35\0\2\12"+
    "\5\0\1\12\5\0\5\12\1\203\14\12\4\0\3\12"+
    "\6\0\1\12\20\0\1\204\65\0\1\205\34\0\2\17"+
    "\5\0\1\17\5\0\11\17\1\206\10\17\4\0\3\17"+
    "\6\0\1\17\3\0\2\17\5\0\1\17\5\0\5\17"+
    "\1\207\14\17\4\0\3\17\6\0\1\17\3\0\2\17"+
    "\5\0\1\17\5\0\22\17\4\0\3\17\6\0\1\210"+
    "\3\0\2\17\5\0\1\17\5\0\1\211\21\17\4\0"+
    "\3\17\6\0\1\17\3\0\2\17\5\0\1\17\5\0"+
    "\1\212\21\17\4\0\3\17\6\0\1\17\3\0\2\17"+
    "\5\0\1\17\5\0\12\17\1\213\7\17\4\0\3\17"+
    "\6\0\1\17\3\0\2\17\5\0\1\17\5\0\6\17"+
    "\1\214\13\17\4\0\3\17\6\0\1\17\3\0\2\17"+
    "\5\0\1\17\5\0\20\17\1\215\1\17\4\0\3\17"+
    "\6\0\1\17\3\0\2\17\5\0\1\17\5\0\13\17"+
    "\1\216\6\17\4\0\3\17\6\0\1\17\26\0\1\217"+
    "\34\0\2\12\5\0\1\12\5\0\6\12\1\220\13\12"+
    "\4\0\3\12\6\0\1\12\35\0\1\221\42\0\1\222"+
    "\42\0\2\17\5\0\1\17\5\0\15\17\1\223\4\17"+
    "\4\0\3\17\6\0\1\17\3\0\2\17\5\0\1\17"+
    "\5\0\6\17\1\224\13\17\4\0\3\17\6\0\1\17"+
    "\3\0\2\17\5\0\1\17\5\0\15\17\1\225\4\17"+
    "\4\0\3\17\6\0\1\17\3\0\2\17\5\0\1\17"+
    "\5\0\15\17\1\226\4\17\4\0\3\17\6\0\1\17"+
    "\3\0\2\17\5\0\1\17\5\0\15\17\1\227\4\17"+
    "\4\0\3\17\6\0\1\17\3\0\2\17\5\0\1\17"+
    "\5\0\13\17\1\230\6\17\4\0\3\17\6\0\1\17"+
    "\3\0\2\17\5\0\1\17\5\0\1\231\21\17\4\0"+
    "\3\17\6\0\1\17\27\0\1\232\33\0\2\12\5\0"+
    "\1\12\5\0\7\12\1\233\12\12\4\0\3\12\6\0"+
    "\1\12\26\0\1\234\63\0\1\235\30\0\2\17\5\0"+
    "\1\17\5\0\13\17\1\236\6\17\4\0\3\17\6\0"+
    "\1\17\3\0\2\17\5\0\1\17\5\0\7\17\1\237"+
    "\12\17\4\0\3\17\6\0\1\17\3\0\2\17\5\0"+
    "\1\17\5\0\6\17\1\240\13\17\4\0\3\17\6\0"+
    "\1\17\3\0\2\17\5\0\1\17\5\0\4\17\1\241"+
    "\15\17\4\0\3\17\6\0\1\17\3\0\2\17\5\0"+
    "\1\17\5\0\12\17\1\242\7\17\4\0\3\17\6\0"+
    "\1\17\27\0\1\243\63\0\1\244\27\0\2\17\5\0"+
    "\1\17\5\0\7\17\1\245\12\17\4\0\3\17\6\0"+
    "\1\17\3\0\2\17\5\0\1\17\5\0\1\17\1\246"+
    "\20\17\4\0\3\17\6\0\1\17\3\0\2\17\5\0"+
    "\1\17\5\0\13\17\1\247\6\17\4\0\3\17\6\0"+
    "\1\17\33\0\1\250\52\0\1\250\34\0\2\17\5\0"+
    "\1\17\5\0\13\17\1\251\6\17\4\0\3\17\6\0"+
    "\1\17\3\0\2\17\5\0\1\17\5\0\11\17\1\252"+
    "\10\17\4\0\3\17\6\0\1\17\3\0\2\17\5\0"+
    "\1\17\5\0\6\17\1\253\13\17\4\0\3\17\6\0"+
    "\1\17\3\0\2\17\5\0\1\17\5\0\13\17\1\254"+
    "\6\17\4\0\3\17\6\0\1\17\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6336];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\1\1\1\11\22\1\1\11\1\1\2\11"+
    "\3\1\5\11\1\1\3\11\1\0\1\1\3\0\1\11"+
    "\3\0\1\1\1\0\13\1\1\11\1\1\3\0\1\11"+
    "\1\0\1\1\2\0\1\11\1\0\1\1\1\11\1\0"+
    "\15\1\2\0\1\1\1\0\1\1\2\0\14\1\1\11"+
    "\3\0\1\1\2\0\11\1\1\11\1\0\1\1\2\0"+
    "\11\1\1\0\1\1\2\0\7\1\1\11\1\1\2\0"+
    "\5\1\2\0\3\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
/** in state "resolver", count the level of nested braces that we're in */
int resolver_brace_depth = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CocoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 46: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            }
          case 47: break;
          case 3: 
            { yybegin(global_decl); return CocoTypes.IDENT;
            }
          case 48: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            }
          case 49: break;
          case 5: 
            { return CocoTypes.IDENT;
            }
          case 50: break;
          case 6: 
            { return CocoTypes.EQUALS;
            }
          case 51: break;
          case 7: 
            { return CocoTypes.DOT;
            }
          case 52: break;
          case 8: 
            { return CocoTypes.PLUS;
            }
          case 53: break;
          case 9: 
            { return CocoTypes.MINUS;
            }
          case 54: break;
          case 10: 
            { return CocoTypes.OR;
            }
          case 55: break;
          case 11: 
            { return CocoTypes.LPAREN;
            }
          case 56: break;
          case 12: 
            { return CocoTypes.RPAREN;
            }
          case 57: break;
          case 13: 
            { return CocoTypes.LSPAREN;
            }
          case 58: break;
          case 14: 
            { return CocoTypes.RSPAREN;
            }
          case 59: break;
          case 15: 
            { return CocoTypes.LAPAREN;
            }
          case 60: break;
          case 16: 
            { return CocoTypes.RAPAREN;
            }
          case 61: break;
          case 17: 
            { yybegin(resolver);
            }
          case 62: break;
          case 18: 
            { ++resolver_brace_depth;
            }
          case 63: break;
          case 19: 
            { if(resolver_brace_depth <= 0) { yybegin(coco); return CocoTypes.RESOLVER; }
                          --resolver_brace_depth;
            }
          case 64: break;
          case 20: 
            { return CocoTypes.STRING;
            }
          case 65: break;
          case 21: 
            { return CocoTypes.COMMENT;
            }
          case 66: break;
          case 22: 
            { yybegin(pre_resolver); resolver_brace_depth = 0;
            }
          case 67: break;
          case 23: 
            { return CocoTypes.TO_KEYWORD;
            }
          case 68: break;
          case 24: 
            { return CocoTypes.DOTDOT;
            }
          case 69: break;
          case 25: 
            { return CocoTypes.INSTRUMENTATION_CODE_ANGLE;
            }
          case 70: break;
          case 26: 
            { return CocoTypes.CHARACTER;
            }
          case 71: break;
          case 27: 
            { return CocoTypes.END_KEYWORD;
            }
          case 72: break;
          case 28: 
            { return CocoTypes.ANY_KEYWORD;
            }
          case 73: break;
          case 29: 
            { return CocoTypes.SYNC_KEYWORD;
            }
          case 74: break;
          case 30: 
            { return CocoTypes.FROM_KEYWORD;
            }
          case 75: break;
          case 31: 
            { return CocoTypes.WEAK_KEYWORD;
            }
          case 76: break;
          case 32: 
            { return CocoTypes.INSTRUMENTATION_CODE_PARENDOT;
            }
          case 77: break;
          case 33: 
            { return CocoTypes.INSTRUMENTATION_CODE_ANGLEDOT;
            }
          case 78: break;
          case 34: 
            { return CocoTypes.IGNORE_KEYWORD;
            }
          case 79: break;
          case 35: 
            { return CocoTypes.NESTED_KEYWORD;
            }
          case 80: break;
          case 36: 
            { return CocoTypes.TOKENS_KEYWORD;
            }
          case 81: break;
          case 37: 
            { return CocoTypes.CONTEXT_KEYWORD;
            }
          case 82: break;
          case 38: 
            { return CocoTypes.PRAGMAS_KEYWORD;
            }
          case 83: break;
          case 39: 
            { yypushback(yylength()); yybegin(compiler_decl); return CocoTypes.INSTRUMENTATION_CODE;
            }
          case 84: break;
          case 40: 
            { return CocoTypes.COMPILER_KEYWORD;
            }
          case 85: break;
          case 41: 
            { return CocoTypes.COMMENTS_KEYWORD;
            }
          case 86: break;
          case 42: 
            { yypushback(yylength()); yybegin(coco); return CocoTypes.INSTRUMENTATION_CODE;
            }
          case 87: break;
          case 43: 
            { return CocoTypes.CHARACTERS_KEYWORD;
            }
          case 88: break;
          case 44: 
            { return CocoTypes.IGNORECASE_KEYWORD;
            }
          case 89: break;
          case 45: 
            { return CocoTypes.PRODUCTIONS_KEYWORD;
            }
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
